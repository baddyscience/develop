import random
import datetime


def person_name(gender_of_id, last_name_file, male_name_file, female_name_file):
    """
    @参数 gender_of_id：性别，字符串类型
    @参数 last_name_file：百家姓文件名，字符串类型
    @参数 male_name_file：男性常用名文件名，字符串类型
    @参数 female_name_file：女性常用名文件名，字符串类型
    接收性别、百家姓文件名、男性常用名文件名、女性常用名文件名为参数
    先随机抽取一个姓氏，再根据性别随机抽取名字，
    返回表示姓名的字符串。
    """
    with open(last_name_file, 'r', encoding='utf-8') as f:
        last_names = f.readlines()
    last_name = random.choice(last_names).strip()

    if gender_of_id == '男':
        with open(male_name_file, 'r', encoding='utf-8') as f:
            male_names = f.readlines()
        first_name = random.choice(male_names).strip()
    else:
        with open(female_name_file, 'r', encoding='utf-8') as f:
            female_names = f.readlines()
        first_name = random.choice(female_names).strip()

    return last_name + first_name



def area_code(area_file):
    """
    @参数 area_file：包含地区编码的文件名，字符串类型
    传入参数为包含地区编码和地区名的文件名的字符串，以地区编码为键，地区名为值构建字典作为返回值。
    """
    area_dict = {}
    with open(area_file, 'r', encoding='utf-8') as file:
        for line in file:
            parts = line.strip().split(',')
            if len(parts) == 2:
                area_dict[parts[0]] = parts[1]
            else:
                print(f"Skipping invalid line: {line.strip()}")
    return area_dict



def birthdate():
    """在1900-2020间随机抽取一个数字作为出生年份，再随机生成一个合法的包含月和日的日期。需
    要注意月份范围为1-12，1、3、5、7、8、10、12月的日期范围为1-31，4、6、9、11的日期范围为1-30，闰年2月
    的日期范围为1-29，平年2月的日期范围为1-28。年为4位字符串，月和日均为2位字符串，依序构成长
    度为8的字符串作为返回值，例如19840509 """
    # year_of_birth = random.choice(range(1900, 2020))
    # days_of_rand = datetime.timedelta(days=random.randint(1, 366))
    # date_of_birth = datetime.date.today() + days_of_rand         # 月份和日期项
    # return str(year_of_birth) + date_of_birth.strftime('%m%d')   # 19840509
    year_of_birth = random.choice(range(1900, 2020))
    days_of_rand = datetime.timedelta(days=random.randint(1, 366))
    date_of_birth = datetime.datetime.strptime(str(year_of_birth)+'0101', "%Y%m%d") + days_of_rand          # 月份和日期项
    return date_of_birth.strftime("%Y%m%d")  # 19840509


def order_number(gender_of_id):
    """接收表示性别的字符串为参数，随机抽取1-99之间的整数作为生出顺序号，根据传入的性别随
    机抽取第17位序号数字，男性为偶数，女性为奇数。
    返回值为2位的顺序号，字符串类型
    """
    num = random.choice(range(1, 100))
    # gender_num = random.choice('13579') if gender_of_id == '男' else random.choice('02468')
    if gender_of_id == '男':
        gender_num = random.choice('13579')
    else:
        gender_num = random.choice('02468')

    return '{:02}'.format(num) + str(gender_num)


def id_of_17(area_of_code, birth_date, birth_order):
    """
    @参数 area_of_code：地区码字典
    @参数 birth_date：字符串
    @参数 birth_order：字符串
    接收地区码字典，出生日期和出生顺序号，随机抽取一个地区码，返回身份证号前17位的字符串。
    需要注意的是，抽取地区码时，要避免抽取到省或地级市的编码(最后2位编码为0)。
    """
    area_code = random.choice([x for x in area_of_code if x[-2:] != '00'])  # 避免选择省、市编码
    return area_code + birth_date + birth_order



def id17_to_18(id_number):
    """
    @ 参数 id_number：身份证号前17位，字符串
    为身份证号增加校验位，接收身份证号码前17位，返回18位身份证号，校验码的计算方法为：
    1. 将前面的身份证号码17位数分别乘以不同的系数。第一位到第十七位的系数分别为:
       7、9、10、5、8、4、2、1、6、3、7、9、10、5、8、4、2 ;
    2. 将这17位数字和系数相乘的结果相加;
    3. 用加出来和除以11，看余数是多少;
    4. 余数只可能有0、1、2、3、4、5、6、7、8、9、10这11个数字。
       其分别对应的最后一位身份证的号码为1、0、X、9、8、7、6、5、4、3、2，其中的X是罗马数字10;
    5. 通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ；如果余数是10，
       身份证的最后一位号码就是2。
       返回值为18位身份证号，字符串类型。
    """
    weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
    check_codes = '10X98765432'
    total = sum(int(id_number[i]) * weight[i] for i in range(17))
    remainder = total % 11
    return id_number + check_codes[remainder]



def village_of_live(village_file, area_of_code):
    """
    @ 参数 village_file：包含常见小区名的文件名，字符串类型
    @ 参数 area_of_code：地区编码，字典类型
    从village_file中随机选择一个小区名，从area_of_code中随机选择一个地区编码，并从中获取省、市、
    县(区)名。楼栋号限制[1-30]中随机，单元号限制[1-7]中随机，楼层号限制[1-35]中随机，
    房间号限制[1-4]中随机。
    返回值为居住地址和地区编码，均为字符串类型。
    """
    with open(village_file, 'r', encoding='utf-8') as data:
        village_live = data.readline().split()
    village = random.choice(village_live)
    building = random.choice(range(1, 30))
    door = random.choice(range(1, 7))
    floor = random.choice(range(1, 35))
    room = random.choice(range(1, 4))
    area_id = random.choice([x for x in list(area_of_code.keys()) if x[-2:] != '00'])  # 避免抽到省市的编码
    with open(village_file, 'r', encoding='utf-8') as f:
        villages = f.readlines()
    village = random.choice(villages).strip()

    building = random.choice(range(1, 31))
    unit = random.choice(range(1, 8))
    floor = random.choice(range(1, 36))
    room = random.choice(range(1, 5))

    area_id = random.choice([x for x in list(area_of_code.keys()) if x[-2:] != '00'])  # 避免选择省市编码
    return village, area_id



def all_of_nation(nation_file):
    """
    @参数 nation_file：文件名，字符串类型
    传入参数为包含民族的文件名，从中随机抽取一个民族为返回值。
    需要注意的是，返回值里不包含'族'字，例如抽取'蒙古族',返回值为'蒙古'。
    """
    with open(nation_file, 'r', encoding='utf-8') as file:
        nations = file.readlines()
    nation = random.choice(nations).strip()
    if '族' in nation:
        nation = nation.replace('族', '')
    
    return nation



def print_id(full_name, gender_of_id, id_number, address, nation, birth_date):
    """
    @ 参数 full_name：姓名，字符串类型
    @ 参数 gender_of_id： 性别，字符串类型
    @ 参数 id_number：公民身份证号， 字符串类型
    @ 参数 address：住址， 字符串类型
    @ 参数 nation：民族， 字符串类型
    @ 参数 birth_date：出生年月日， 字符串类型
    按身份证正面的格式输出完整的身份信息，包括：
    姓名
    性别   民族
    出生年月日
    住址
    公民身份号码"""
    print('-------------------------------------------------')
    print()
    print(f'  姓  名  {full_name}')
    print(f'  性  别  {gender_of_id}   民族  {nation}')
    print(f'  出  生  {birth_date[:4]} 年 {int(birth_date[4:6])} 月 {int(birth_date[6:])} 日')
    print(f'  住  址  {address[0]}')
    print()
    print(f'  公民身份号码 {id_number}')
    print('-------------------------------------------------')


# 获取和输出身份证注册地的省、市、县（区）
def area_of_registration(id_number, area_of_code):
    """
    @参数 id_number：身份证号，字符串
    @参数 area_of_code：地区编码，字典
    接收身份证号和地区编码的字典为参数，返回持证人身份证注册地址的省市县(区)。
    省的编码末4位为0
    地级市(区)编码末2位为0
    需要注意的是，若持证人注册地为直辖市，则住址中无地级市，直接输出市和区，例如：北京市朝阳区
    其他地区格式例如：湖北省武汉市洪山区。
    """
    area_code = id_number[:6]

    if area_code in area_of_code:
        province_city_district = area_of_code[area_code]
        return province_city_district
    else:
        return "未知地区"



def area_of_live(area_id, area_of_code):
    """
    @参数 area_id：居住地编码，字符串
    @参数 area_of_code：地区编码，字典
    接收居住地编码和地区编码字典为参数，返回持证人居住地址的省市县(区)
    需要注意的是，若持证人居住地为直辖市，则住址中无地级市，直接输出市和区，例如：北京市朝阳区
    其他地区格式例如：湖北省武汉市洪山区。
    """
    province = area_of_code.get(area_id[:2] + '0000', '未知省')
    city = area_of_code.get(area_id[:4] + '00', '未知市')
    district = area_of_code.get(area_id, '未知区')
    return province, city, district



# 查验城市的编码
def check_city_code(city_name, area_of_code):
    """接收一个表示城市名的字符串参数和地区编码，若城市名存在，返回值为该城市对应的地区编码，6位字符串。
    若城市名不存在，返回False。
    @参数 city_name：城市名，字符串
    @参数 area_of_code：地区编码，字典类型
    """
    for code, name in area_of_code.items():
        if city_name in name:
            return code
    return False



def check_city(id_number, city_name, city_code, area_live):
    """
    @ 参数 id_number：身份证号，字符串类型
    @ 参数 city_name：查验城市名，字符串类型
    @ 参数 city_code：城市编码，字符串类型
    @ 参数 area_live：居住地信息，字符串类型
    接收参数身份证号，查验城市名和城市编码，居住地信息，查验持证人是否与指定的城市相关
    若居住地与查验城市名相同，返回持证人居住于city_name市
    否则若出生地与查验城市相同，返回持证人出生于city_name市
    其他情况返回持证人与city_name无关联。以及持证人居住信息。
    返回值均为字符串类型。
    """
    reg_province_city_district = area_of_registration(id_number, area_of_code)
    
    if city_code == reg_province_city_district:
        return f"持证人出生地与 {city_name} 市相同"
    else:
        return f"持证人出生地与 {city_name} 市不同"



def age_of_id(id_number):
    """接收身份证号为参数，返回值为持证人年龄和性别。
    年龄的计算方式为当前年份减出生年份。
    @参数 id_number：身份证号，字符串类型。
    """
    current_year = datetime.datetime.now().year
    gender = '男' if id_number[16] in '13579' else '女'
    age = current_year - int(id_number[6:10])
    return gender, age


def judge(txt):
    """接收一个字符串为参数，如果参数值为“姓名”，输出当前模拟身证上的姓名；
    如果参数是身份证号，输出当前模拟的身份证号的号码。如果参数值是“住址”，输出当前身份证号上的住址。
    如果参数值为“性别”，输出当前模拟身证上的性别；
    如果参数值为“姓名”，输出当前模拟身证上的姓名；
    如果参数值为“住址”，输出当前模拟身证上的住址；
    如果参数值为“身份证”，按身份证格式输出当前模拟身证上的全部信息；
    如果参数值为“查询”，,要求用户输入一个要查询的人名，再输入一个单词做为匹配词，
    根据输入设置敏感地区，判定持证人是否为敏感地区常住人或是敏感地区出生者。。"""
    if txt == '姓名':
        print(person)
    elif txt == '性别':
        print(user_gender)
    elif txt == '身份证号':
        print(id18)
    elif txt == '住址':
        print(address_and_code[0])
    elif txt == '身份证':
        print_id(person, user_gender, id18, address_and_code, nationality, date)
    elif txt == '查询':
        city_name = input()  # 输入敏感城市名
        city_code = check_city_code(city_name, area_number)
        if city_code:
            print(check_city(id18, city_name, city_code, address_and_code[0]))
        else:
            print('城市输入错误，请输入包含"市"在内的城市名')
        print(area_of_live(address_and_code[1], area_number))
    else:
        print('输入错误')


if __name__ == '__main__':
    last_name_filename = 'family names.txt'    # 百家姓
    male_name_filename = 'popularNameM.txt'    # 男性名来源文件
    female_name_filename = 'popularNameF.txt'  # 女性名来源文件
    area_filename = 'IDcode.txt'               # 地区码
    village_filename = 'villageName.txt'       # 常用小区名
    nation_filename = 'nation.txt'             # 民族
    random.seed(int(input()))                       # 随机数种子，不用于自动评测时注释掉此行
    user_gender = random.choice('男女')               # 随机生成男或女
    person = person_name(user_gender, last_name_filename, male_name_filename, female_name_filename)  # 根据性别生成人名
    area_number = area_code(area_filename)       # 地区编码，字典类型
    date = birthdate()                           # 随机生日
    order = order_number(user_gender)                 # 随机出生序号
    id17 = id_of_17(area_number, date, order)    # 拼接身份证号前17位
    id18 = id17_to_18(id17)                      # 加校验码成18位身份证号
    address_and_code = village_of_live(village_filename, area_number)
    nationality = all_of_nation(nation_filename)
    text = input()
    judge(text)

输入
2021
身份证
期望输出
-------------------------------------------------

  姓  名  司空念梦
  性  别  女   民族  达斡尔
  出  生  1969 年 5 月 23 日
  住  址  江西省上饶市万年县金沙湾新城19栋1单元2102室

  公民身份号码 441421196905233209
-------------------------------------------------
你的输出
-------------------------------------------------

  姓  名  墨哈谯笪，年爱阳佟。问萍 青蕾 雁云 芷枫 千旋 向梅 含蓝 怀丝 梦文 幼芙 晓云 雨旋 秋安 雁风 碧槐 从海 语雪 幼凡 秋卉 曼蕾 问蕾 访兰 寄莲 紫绿 新雁 恨容 水柳 南云 曼阳 幼蓝 忆巧 灵荷 怜兰 听曼 碧双 忆雁 夜松 映莲 听曼 秋易 绿莲 宛秋 雁安 问旋 以蓝 若亦 幻丝 山凡 南云 寄蕊 绿春 思海 寄天 友秋 紫玉 从筠 雪海 白筠 灵芙 安莲 惜梅 雪蕾 寄容 秋波 冷云 秋儿 怀菱 亦柏 易槐 怀卉 紫桃 向蕊 易青 千蕊 怜露 灵旋 怀梅 天柏 半白 碧安 秋枫 傲丝 春柔 冰岚 雅翠 易白 夜灵 静柔 醉绿 乐蕊 寄蓝 乐彤 迎琴 之亦 雨寒 谷山 凝安 曼萍 碧露 书南 山薇 念珊 芷雁 尔蕾 绮雪 傲萱 新琴 绿蝶 慕旋 怀易 傲云 晓梅 诗菱 灵珊 幻香 若云 如霜 晓晴 灵山 恨桃 梦凝 幻彤 觅波 慕玉 念山 乐桃 语寒 怀海 孤蝶 灵凝 慕蓝 紫青 千兰 孤柔 语曼 问海 寄筠 安露 听晴 冷寒 之翠 碧灵 凡丝 诗波 友芙 寄莲 之蕊 海琴 宛筠 半山 依槐 觅曼 碧菱 半文 访儿 芷珍 绿春 春蝶 怜槐 映露 雨卉 灵亦 惜莲 念菡 南凡 曼桃 笑灵 惜安 凌筠 翠菡 寒雁 以山 秋彤 巧兰 山雪 寒绿 忆易 依萱 如菡 含萱 惜梦 绮莲 翠易 冷筠 乐槐 傲青 幼灵 春柔 恨易 青文 初竹 从旋 沛山 映凝 静柳 雪云 醉蕊 巧荷 思蓝 翠秋 初双 雪旋 从霜 静萍 之彤 晓筠 含云 思兰 梦之 醉芙 若曼 寻槐 夜梅 访安 以绿 新柏 诗珊 灵青 幻菱 谷双 梦烟 凡烟 寻绿 香之 盼蕊 香筠 怀萱 半蓉 翠安 忆卉 念柏 念之 宛彤 如竹 天雪 念旋 笑萍 海风 小琴 乐海 易南 碧蕊 雁凝 雁风 依霜 天蝶 语凝 之卉 易云 若菡 幼兰 巧曼 以柳 小天 采雁 易莲 笑南 芷雁 觅霜 海柏 凝雪 诗晴 以梅 绮荷 乐山 又梦 听蓝 又彤 向竹 安琴 秋露 如波 尔槐 小易 静云 梦雪 幼凝 慕莲 如薇 静秋 幼柏 谷易 安芙 觅琴 冰槐 诗青 碧秋 从琴 从梦 寻风 凡薇 夜云 幼芙 以彤 怀云 幻柳 芷秋 以菱 靖柳 紫松 凡霜 灵云 采芙 亦露 香风 觅蓉 雨槐 又雪 碧蕾 香松 以亦 芷柔 千曼 友山 惜晴 幼文 寒波 友岚 乐槐 盼蝶 思山 以天 念梦 白桃 映翠 雁柳 翠灵 以竹 听雁 梦丝 冷烟 山露 安易 静霜 天珊 念蓝 书容 半晴 笑薇 孤萱 寄梦 秋蕊 从蝶 晓曼 半槐 绮易 访岚 含丝 慕安 怀雁 傲露 天岚 安寒 寻雪 幻旋 雁彤 天玉 亦珊 迎荷 慕柏 书柳 春海 初柏 绮翠 凝珍 海芙 尔香 问旋 紫之 灵翠 芷波 曼梦 向蕊 笑琴 映丝 妙筠 紫彤 妙曼 以阳 紫筠 易玉 梦蓝 谷露 曼春 寻枫 寻山 慕槐 凝绿 凝梅 醉文 听雪 以珊 友柳 孤珊 山芙 向凡 如巧 从彤 南翠 天凝
  性  别  女   民族  汉   蒙古   回   藏   维吾尔   苗   彝   壮   布依   朝鲜   满   侗   瑶   白   土家   哈尼   哈萨克   傣   黎   傈僳   佤   畲   高山   拉祜   水   东乡   纳西   景颇   柯尔克孜   土   达斡尔   仫佬   羌   布朗   撒拉   毛南   仡佬   锡伯   阿昌   普米   塔吉克   怒   乌孜别克   俄罗斯   鄂温克   德昂   保安   裕固   京   塔塔尔   独龙   鄂伦春   赫哲   门巴   珞巴   基诺
  出  生  1931 年 11 月 23 日
  住  址  美景天城 田园牧歌 水木春城 中景濠庭 融城 西钓鱼台 绣江 枫蓝国际中心 季景沁园   阳光斯坦福 西BD 北苑家园 威尼斯花园 UHN国际村   BDA国际企业大厦 达龙骏景 时间国际 上东三角洲  国典华园 北苑家园 枫桥别墅 纯粹建舍 京艺天朗 阳光上东   蓝山国际 旺座中心 宝源商务公寓 城市复兴·华城 清上园   万泉新新家园 碧水云天·颐园 新康家园 恒华国际   诚品建筑 水语自然 鑫兆雅园 夏都盈座 建赏   朝阳新城 上海沙龙 博雅西园 永泰园-新风景 通用时代国际中心   翡翠城 燕沙·后（东润枫景） 世纪城·生活城 荣上居 原生墅   博雅国际中心 天安豪园 土博士城 东领鉴筑 定福家园   后现代城 远洋新干线 汤泉逸墅 珠江帝景 东1时区   德国楼尚 卡布其诺 万年花城 中国房子 领地 华纺易城   纳帕溪谷 西现代城 朝阳无限 世纪东方城 郦城   庄胜城 金隅丽港城 飘HOME 亿城中心 科技财富中心   亮马新世家 万和世家 京城雅居 金地·格林小镇 双惠小区   嘉和人家 麒麟家园 上地佳园 远洋天地 幻星家园 光彩国际公寓   蓝堡 阳光都市 怡禾国际中心 当代万国城  嘉铭.桐城 国风北京 银领国际 晶都国际 北京太阳城   山水倾城 熙府桃园 澳洲康都 NOLITA 大宁山庄 重兴园   懿品阁 本家润园 天和人家 龙熙顺景 珠江国际城   远洋山水 正阳天下 青庭 山水文园 万象新天 康斯丹郡   华府景园 宽HOUSE 欧园·北欧印象 领秀硅谷   科南中心 富顿中心 西山美墅馆 花样年华 格林雅地   金地国际花园 建东苑 天伦锦城 柏林爱乐 观澜国际花园   太阳国际公馆 倚林佳园 峻峰华亭 石榴园小区 世桥国贸公寓   万科青青家园 金晖家园 国瑞城 城开.华鼎世家   丰汇时代 月亮城堡 跃城 慧谷阳光  庄维花园 月桂庄园 盈都大厦 独墅逸致 金海国际   太阳花社区 中鑫国际 北京玫瑰园 纳帕溪谷 远洋德邑   城市月光 温莎大道 顺驰林溪别墅 风格与林 卡尔生活馆   富海中心 北京财富中心 康桥水郡 金宸公寓 金隆基大厦   新裕家园 北京青年城 上层建筑-果岭里 万科水榭花都   建欣苑 康城 都市绿洲 境界 逸成东苑 东方太阳城 森林大第   宝汇苑 琳琅庄园 颐源居 东方银座 华腾园 龙泽苑   新都庄园   漓江山水花园 爱建园 文化佳园 东方城市花园 奥林匹克花园 祥 仁恒河滨花园 怡东花园 古北河滨城 新天地河滨花园、仁恒河滨花园 回龙湾 世纪名都西区 天山水榭花都 世纪城 众美凤凰城 荣盛阿尔卡迪亚 桥华世纪村    万科花园新城 锦华北园 大有恬园 华夏花园        新世界阳光花园 汇统花园 雅居园小区 威海翠海明珠小区     月安花园 太阳城天泓山庄 新世纪花园 娄邑小区 镜湖花园    东方明珠花园 都市花园 城市花园 莱茵苑 恒美嘉园 翠岛花城   天一城 市聚福园 滨湖花园 金坛金谷华城 西湖花园 东晖苑    康欣花园 山水人家住宅小区 南瓯景园 金都景苑小区 平湖梅兰苑    大东方名嘉小区 景元花园 鉴湖景园 保集半岛 文鼎苑     郑州清华园 新乡博筑花园（西园） 青山绿景园 水明城 保利花园   金鹰城 圣爵菲斯 宏城苑 中天星城 西街花园 保利花园 山水庭苑   四季花城 星河湾小区 金沙湾新城 鸿都花园 中山颐和山庄   大唐四季花园 御馨花都 金诺御景山居 回龙湾 紫薇城市花园   光华小区 世纪小区   康乐花园 昌吉世纪花园     汇景新城 怡东花园 聚福园 天地国际花园 天地新城 金帝花园   梦泽园   城市花园 怡景花园 幸福E家 锦园小区 盛世闲庭 新贵都  紫竹轩  康宁家园  阳光丽景  清风别苑  瑞雪华庭  锦绣雷庭     青云林海 听涛园  松竹苑 天赐良园  天福苑  城市生活家  绅园   阳光地带 湖光山色 阳光月秀 锦绣山庄  锦绣家园翰林名居   尚书苑 名隐山庄 书香世家 三味雅筑 盛世华南 水榭楼阁 碧水雅居

  公民身份号码 451121193111230569
-------------------------------------------------